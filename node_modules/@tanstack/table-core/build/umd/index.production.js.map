{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getExpandedRowModel.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getPaginationRowModel.ts","../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T, TDepth extends any[] = []> = TDepth['length'] extends 5\n  ? never\n  : unknown extends T\n  ? string\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>, TDepth>\n  : T extends any[]\n  ? DeepKeys<T[number], [...TDepth, any]>\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T, TDepth>\n  : never\n\ntype DeepKeysPrefix<\n  T,\n  TPrefix,\n  TDepth extends any[]\n> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix], [...TDepth, any]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  for (const feature of table._features) {\n    feature.createColumn?.(column, table)\n  }\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    feature.createHeader?.(header, table)\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        const leftColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const rightColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const centerColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n\n        const headerGroups = buildHeaderGroups(\n          allColumns,\n          [...leftColumns, ...centerColumns, ...rightColumns],\n          table\n        )\n\n        return headerGroups\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n      ],\n      (allColumns, leafColumns, left) => {\n        const orderedLeafColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, right) => {\n        const orderedLeafColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right')\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftFooterGroups = memo(\n      () => [table.getLeftHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterFooterGroups = memo(\n      () => [table.getCenterHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightFooterGroups = memo(\n      () => [table.getRightHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return headerGroups\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftFlatHeaders = memo(\n      () => [table.getLeftHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getCenterFlatHeaders = memo(\n      () => [table.getCenterHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightFlatHeaders = memo(\n      () => [table.getRightHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(\n      () => [table.getCenterFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeftLeafHeaders = memo(\n      () => [table.getLeftFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getRightLeafHeaders = memo(\n      () => [table.getRightFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n\n    table.getLeafHeaders = memo(\n      () => [\n        table.getLeftHeaderGroups(),\n        table.getCenterHeaderGroups(),\n        table.getRightHeaderGroups(),\n      ],\n      (left, center, right) => {\n        return [\n          ...(left[0]?.headers ?? []),\n          ...(center[0]?.headers ?? []),\n          ...(right[0]?.headers ?? []),\n        ]\n          .map(header => {\n            return header.getLeafHeaders()\n          })\n          .flat()\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => table.options.debugAll ?? table.options.debugHeaders,\n      }\n    )\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getSize = () => {\n      const columnSize = table.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.columnDef.minSize ?? defaultColumnSizing.minSize,\n          columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n        ),\n        column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n      )\n    }\n    column.getStart = position => {\n      const columns = !position\n        ? table.getVisibleLeafColumns()\n        : position === 'left'\n        ? table.getLeftVisibleLeafColumns()\n        : table.getRightVisibleLeafColumns()\n\n      const index = columns.findIndex(d => d.id === column.id)\n\n      if (index > 0) {\n        const prevSiblingColumn = columns[index - 1]!\n\n        return (\n          prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n        )\n      }\n\n      return 0\n    }\n    column.resetSize = () => {\n      table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n        return rest\n      })\n    }\n    column.getCanResize = () => {\n      return (\n        (column.columnDef.enableResizing ?? true) &&\n        (table.options.enableColumnResizing ?? true)\n      )\n    }\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    header.getSize = () => {\n      let sum = 0\n\n      const recurse = (header: Header<TData, TValue>) => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse)\n        } else {\n          sum += header.column.getSize() ?? 0\n        }\n      }\n\n      recurse(header)\n\n      return sum\n    }\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1]!\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n      }\n\n      return 0\n    }\n    header.getResizeHandler = () => {\n      const column = table.getColumn(header.column.id)\n      const canResize = column?.getCanResize()\n\n      return (e: unknown) => {\n        if (!column || !canResize) {\n          return\n        }\n\n        ;(e as any).persist?.()\n\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return\n          }\n        }\n\n        const startSize = header.getSize()\n\n        const columnSizingStart: [string, number][] = header\n          ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()])\n          : [[column.id, column.getSize()]]\n\n        const clientX = isTouchStartEvent(e)\n          ? Math.round(e.touches[0]!.clientX)\n          : (e as MouseEvent).clientX\n\n        const newColumnSizing: ColumnSizingState = {}\n\n        const updateOffset = (\n          eventType: 'move' | 'end',\n          clientXPos?: number\n        ) => {\n          if (typeof clientXPos !== 'number') {\n            return\n          }\n\n          table.setColumnSizingInfo(old => {\n            const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n            const deltaPercentage = Math.max(\n              deltaOffset / (old?.startSize ?? 0),\n              -0.999999\n            )\n\n            old.columnSizingStart.forEach(([columnId, headerSize]) => {\n              newColumnSizing[columnId] =\n                Math.round(\n                  Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                ) / 100\n            })\n\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage,\n            }\n          })\n\n          if (\n            table.options.columnResizeMode === 'onChange' ||\n            eventType === 'end'\n          ) {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing,\n            }))\n          }\n        }\n\n        const onMove = (clientXPos?: number) => updateOffset('move', clientXPos)\n\n        const onEnd = (clientXPos?: number) => {\n          updateOffset('end', clientXPos)\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: [],\n          }))\n        }\n\n        const mouseEvents = {\n          moveHandler: (e: MouseEvent) => onMove(e.clientX),\n          upHandler: (e: MouseEvent) => {\n            document.removeEventListener('mousemove', mouseEvents.moveHandler)\n            document.removeEventListener('mouseup', mouseEvents.upHandler)\n            onEnd(e.clientX)\n          },\n        }\n\n        const touchEvents = {\n          moveHandler: (e: TouchEvent) => {\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onMove(e.touches[0]!.clientX)\n            return false\n          },\n          upHandler: (e: TouchEvent) => {\n            document.removeEventListener('touchmove', touchEvents.moveHandler)\n            document.removeEventListener('touchend', touchEvents.upHandler)\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onEnd(e.touches[0]?.clientX)\n          },\n        }\n\n        const passiveIfSupported = passiveEventSupported()\n          ? { passive: false }\n          : false\n\n        if (isTouchStartEvent(e)) {\n          document.addEventListener(\n            'touchmove',\n            touchEvents.moveHandler,\n            passiveIfSupported\n          )\n          document.addEventListener(\n            'touchend',\n            touchEvents.upHandler,\n            passiveIfSupported\n          )\n        } else {\n          document.addEventListener(\n            'mousemove',\n            mouseEvents.moveHandler,\n            passiveIfSupported\n          )\n          document.addEventListener(\n            'mouseup',\n            mouseEvents.upHandler,\n            passiveIfSupported\n          )\n        }\n\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id,\n        }))\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnSizing = updater =>\n      table.options.onColumnSizingChange?.(updater)\n    table.setColumnSizingInfo = updater =>\n      table.options.onColumnSizingInfoChange?.(updater)\n    table.resetColumnSizing = defaultState => {\n      table.setColumnSizing(\n        defaultState ? {} : table.initialState.columnSizing ?? {}\n      )\n    }\n    table.resetHeaderSizeInfo = defaultState => {\n      table.setColumnSizingInfo(\n        defaultState\n          ? getDefaultColumnSizingInfoState()\n          : table.initialState.columnSizingInfo ??\n              getDefaultColumnSizingInfoState()\n      )\n    }\n    table.getTotalSize = () =>\n      table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getLeftTotalSize = () =>\n      table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getCenterTotalSize = () =>\n      table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getRightTotalSize = () =>\n      table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getIsAllParentsExpanded: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetExpanded = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetExpanded ??\n        !table.options.manualExpanding\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetExpanded()\n          queued = false\n        })\n      }\n    }\n    table.setExpanded = updater => table.options.onExpandedChange?.(updater)\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded ?? !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true)\n      } else {\n        table.setExpanded({})\n      }\n    }\n    table.resetExpanded = defaultState => {\n      table.setExpanded(defaultState ? {} : table.initialState?.expanded ?? {})\n    }\n    table.getCanSomeRowsExpand = () => {\n      return table\n        .getPrePaginationRowModel()\n        .flatRows.some(row => row.getCanExpand())\n    }\n    table.getToggleAllRowsExpandedHandler = () => {\n      return (e: unknown) => {\n        ;(e as any).persist?.()\n        table.toggleAllRowsExpanded()\n      }\n    }\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded\n      return expanded === true || Object.values(expanded).some(Boolean)\n    }\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true\n      }\n\n      if (!Object.keys(expanded).length) {\n        return false\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false\n      }\n\n      // They must all be expanded :shrug:\n      return true\n    }\n    table.getExpandedDepth = () => {\n      let maxDepth = 0\n\n      const rowIds =\n        table.getState().expanded === true\n          ? Object.keys(table.getRowModel().rowsById)\n          : Object.keys(table.getState().expanded)\n\n      rowIds.forEach(id => {\n        const splitId = id.split('.')\n        maxDepth = Math.max(maxDepth, splitId.length)\n      })\n\n      return maxDepth\n    }\n    table.getPreExpandedRowModel = () => table.getSortedRowModel()\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n      }\n\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel()\n      }\n\n      return table._getExpandedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        const exists = old === true ? true : !!old?.[row.id]\n\n        let oldExpanded: ExpandedStateList = {}\n\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true\n          })\n        } else {\n          oldExpanded = old\n        }\n\n        expanded = expanded ?? !exists\n\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true,\n          }\n        }\n\n        if (exists && !expanded) {\n          const { [row.id]: _, ...rest } = oldExpanded\n          return rest\n        }\n\n        return old\n      })\n    }\n    row.getIsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      return !!(\n        table.options.getIsRowExpanded?.(row) ??\n        (expanded === true || expanded?.[row.id])\n      )\n    }\n    row.getCanExpand = () => {\n      return (\n        table.options.getRowCanExpand?.(row) ??\n        ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n      )\n    }\n    row.getIsAllParentsExpanded = () => {\n      let isFullyExpanded = true\n      let currentRow = row\n\n      while (isFullyExpanded && currentRow.parentId) {\n        currentRow = table.getRow(currentRow.parentId, true)\n        isFullyExpanded = currentRow.getIsExpanded()\n      }\n\n      return isFullyExpanded\n    }\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand()\n\n      return () => {\n        if (!canExpand) return\n        row.toggleExpanded()\n      }\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return filterFns.includesString\n      }\n\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange\n      }\n\n      if (typeof value === 'boolean') {\n        return filterFns.equals\n      }\n\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals\n      }\n\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes\n      }\n\n      return filterFns.weakEquals\n    }\n    column.getFilterFn = () => {\n      return isFunction(column.columnDef.filterFn)\n        ? column.columnDef.filterFn\n        : column.columnDef.filterFn === 'auto'\n        ? column.getAutoFilterFn()\n        : // @ts-ignore\n          table.options.filterFns?.[column.columnDef.filterFn as string] ??\n          filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n    }\n    column.getCanFilter = () => {\n      return (\n        (column.columnDef.enableColumnFilter ?? true) &&\n        (table.options.enableColumnFilters ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanGlobalFilter = () => {\n      return (\n        (column.columnDef.enableGlobalFilter ?? true) &&\n        (table.options.enableGlobalFilter ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsFiltered = () => column.getFilterIndex() > -1\n\n    column.getFilterValue = () =>\n      table.getState().columnFilters?.find(d => d.id === column.id)?.value\n\n    column.getFilterIndex = () =>\n      table.getState().columnFilters?.findIndex(d => d.id === column.id) ?? -1\n\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn()\n        const previousfilter = old?.find(d => d.id === column.id)\n\n        const newFilter = functionalUpdate(\n          value,\n          previousfilter ? previousfilter.value : undefined\n        )\n\n        //\n        if (\n          shouldAutoRemoveFilter(filterFn as FilterFn<TData>, newFilter, column)\n        ) {\n          return old?.filter(d => d.id !== column.id) ?? []\n        }\n\n        const newFilterObj = { id: column.id, value: newFilter }\n\n        if (previousfilter) {\n          return (\n            old?.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj\n              }\n              return d\n            }) ?? []\n          )\n        }\n\n        if (old?.length) {\n          return [...old, newFilterObj]\n        }\n\n        return [newFilterObj]\n      })\n    }\n    column._getFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, column.id)\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return column._getFacetedRowModel()\n    }\n    column._getFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, column.id)\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return column._getFacetedUniqueValues()\n    }\n    column._getFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, column.id)\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined\n      }\n\n      return column._getFacetedMinMaxValues()\n    }\n    // () => [column.getFacetedRowModel()],\n    // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.columnFilters = {}\n    row.columnFiltersMeta = {}\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString\n    }\n\n    table.getGlobalFilterFn = () => {\n      const { globalFilterFn: globalFilterFn } = table.options\n\n      return isFunction(globalFilterFn)\n        ? globalFilterFn\n        : globalFilterFn === 'auto'\n        ? table.getGlobalAutoFilterFn()\n        : // @ts-ignore\n          table.options.filterFns?.[globalFilterFn as string] ??\n          filterFns[globalFilterFn as BuiltInFilterFn]\n    }\n\n    table.setColumnFilters = (updater: Updater<ColumnFiltersState>) => {\n      const leafColumns = table.getAllLeafColumns()\n\n      const updateFn = (old: ColumnFiltersState) => {\n        return functionalUpdate(updater, old)?.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id)\n\n          if (column) {\n            const filterFn = column.getFilterFn()\n\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false\n            }\n          }\n\n          return true\n        })\n      }\n\n      table.options.onColumnFiltersChange?.(updateFn)\n    }\n\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange?.(updater)\n    }\n\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(\n        defaultState ? undefined : table.initialState.globalFilter\n      )\n    }\n\n    table.resetColumnFilters = defaultState => {\n      table.setColumnFilters(\n        defaultState ? [] : table.initialState?.columnFilters ?? []\n      )\n    }\n\n    table.getPreFilteredRowModel = () => table.getCoreRowModel()\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n      }\n\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getFilteredRowModel()\n    }\n\n    table._getGlobalFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, '__global__')\n\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getGlobalFacetedRowModel()\n    }\n\n    table._getGlobalFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, '__global__')\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return table._getGlobalFacetedUniqueValues()\n    }\n\n    table._getGlobalFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, '__global__')\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return\n      }\n\n      return table._getGlobalFacetedMinMaxValues()\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old?.includes(column.id)) {\n          return old.filter(d => d !== column.id)\n        }\n\n        return [...(old ?? []), column.id]\n      })\n    }\n\n    column.getCanGroup = () => {\n      return (\n        column.columnDef.enableGrouping ??\n        true ??\n        table.options.enableGrouping ??\n        true ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsGrouped = () => {\n      return table.getState().grouping?.includes(column.id)\n    }\n\n    column.getGroupedIndex = () => table.getState().grouping?.indexOf(column.id)\n\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup()\n\n      return () => {\n        if (!canGroup) return\n        column.toggleGrouping()\n      }\n    }\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'number') {\n        return aggregationFns.sum\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent\n      }\n    }\n    column.getAggregationFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.aggregationFn)\n        ? column.columnDef.aggregationFn\n        : column.columnDef.aggregationFn === 'auto'\n        ? column.getAutoAggregationFn()\n        : table.options.aggregationFns?.[\n            column.columnDef.aggregationFn as string\n          ] ??\n          aggregationFns[column.columnDef.aggregationFn as BuiltInAggregationFn]\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setGrouping = updater => table.options.onGroupingChange?.(updater)\n\n    table.resetGrouping = defaultState => {\n      table.setGrouping(defaultState ? [] : table.initialState?.grouping ?? [])\n    }\n\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel()\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n      }\n\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel()\n      }\n\n      return table._getGroupedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getIsGrouped = () => !!row.groupingColumnId\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.columnDef.getGroupingValue) {\n        return row.getValue(columnId)\n      }\n\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n        row.original\n      )\n\n      return row._groupingValuesCache[columnId]\n    }\n    row._groupingValuesCache = {}\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    cell.getIsGrouped = () =>\n      column.getIsGrouped() && column.id === row.groupingColumnId\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped()\n    cell.getIsAggregated = () =>\n      !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!row.subRows?.length\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnOrder = updater =>\n      table.options.onColumnOrderChange?.(updater)\n    table.resetColumnOrder = defaultState => {\n      table.setColumnOrder(\n        defaultState ? [] : table.initialState.columnOrder ?? []\n      )\n    }\n    table._getOrderColumnsFn = memo(\n      () => [\n        table.getState().columnOrder,\n        table.getState().grouping,\n        table.options.groupedColumnMode,\n      ],\n      (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns: Column<TData, unknown>[] = []\n\n        // If there is no order, return the normal columns\n        if (!columnOrder?.length) {\n          orderedColumns = columns\n        } else {\n          const columnOrderCopy = [...columnOrder]\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns]\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift()\n            const foundIndex = columnsCopy.findIndex(\n              d => d.id === targetColumnId\n            )\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy]\n        }\n\n        return orderColumns(orderedColumns, grouping, groupedColumnMode)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n        // debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetPageIndex = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetPageIndex ??\n        !table.options.manualPagination\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetPageIndex()\n          queued = false\n        })\n      }\n    }\n    table.setPagination = updater => {\n      const safeUpdater: Updater<PaginationState> = old => {\n        let newState = functionalUpdate(updater, old)\n\n        return newState\n      }\n\n      return table.options.onPaginationChange?.(safeUpdater)\n    }\n    table.resetPagination = defaultState => {\n      table.setPagination(\n        defaultState\n          ? getDefaultPaginationState()\n          : table.initialState.pagination ?? getDefaultPaginationState()\n      )\n    }\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n        const maxPageIndex =\n          typeof table.options.pageCount === 'undefined' ||\n          table.options.pageCount === -1\n            ? Number.MAX_SAFE_INTEGER\n            : table.options.pageCount - 1\n\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n        return {\n          ...old,\n          pageIndex,\n        }\n      })\n    }\n    table.resetPageIndex = defaultState => {\n      table.setPageIndex(\n        defaultState\n          ? defaultPageIndex\n          : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n      )\n    }\n    table.resetPageSize = defaultState => {\n      table.setPageSize(\n        defaultState\n          ? defaultPageSize\n          : table.initialState?.pagination?.pageSize ?? defaultPageSize\n      )\n    }\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n        const topRowIndex = old.pageSize * old.pageIndex!\n        const pageIndex = Math.floor(topRowIndex / pageSize)\n\n        return {\n          ...old,\n          pageIndex,\n          pageSize,\n        }\n      })\n    }\n    table.setPageCount = updater =>\n      table.setPagination(old => {\n        let newPageCount = functionalUpdate(\n          updater,\n          table.options.pageCount ?? -1\n        )\n\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount)\n        }\n\n        return {\n          ...old,\n          pageCount: newPageCount,\n        }\n      })\n\n    table.getPageOptions = memo(\n      () => [table.getPageCount()],\n      pageCount => {\n        let pageOptions: number[] = []\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n        }\n        return pageOptions\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0\n\n    table.getCanNextPage = () => {\n      const { pageIndex } = table.getState().pagination\n\n      const pageCount = table.getPageCount()\n\n      if (pageCount === -1) {\n        return true\n      }\n\n      if (pageCount === 0) {\n        return false\n      }\n\n      return pageIndex < pageCount - 1\n    }\n\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1)\n    }\n\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1\n      })\n    }\n\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel()\n    table.getPaginationRowModel = () => {\n      if (\n        !table._getPaginationRowModel &&\n        table.options.getPaginationRowModel\n      ) {\n        table._getPaginationRowModel =\n          table.options.getPaginationRowModel(table)\n      }\n\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel()\n      }\n\n      return table._getPaginationRowModel()\n    }\n\n    table.getPageCount = () => {\n      return (\n        table.options.pageCount ??\n        Math.ceil(\n          table.getPrePaginationRowModel().rows.length /\n            table.getState().pagination.pageSize\n        )\n      )\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\nexport type RowPinningPosition = false | 'top' | 'bottom'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface RowPinningState {\n  top?: string[]\n  bottom?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface RowPinningTableState {\n  rowPinning: RowPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n  enableColumnPinning?: boolean\n}\n\nexport interface RowPinningOptions<TData extends RowData> {\n  onRowPinningChange?: OnChangeFn<RowPinningState>\n  enableRowPinning?: boolean | ((row: Row<TData>) => boolean)\n  keepPinnedRows?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface RowPinningDefaultOptions {\n  onRowPinningChange: OnChangeFn<RowPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface RowPinningRow {\n  getCanPin: () => boolean\n  getIsPinned: () => RowPinningPosition\n  getPinnedIndex: () => number\n  pin: (\n    position: RowPinningPosition,\n    includeLeafRows?: boolean,\n    includeParentRows?: boolean\n  ) => void\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\nexport interface RowPinningInstance<TData extends RowData> {\n  setRowPinning: (updater: Updater<RowPinningState>) => void\n  resetRowPinning: (defaultState?: boolean) => void\n  getIsSomeRowsPinned: (position?: RowPinningPosition) => boolean\n  _getPinnedRows: (position: 'top' | 'bottom') => Row<TData>[]\n  getTopRows: () => Row<TData>[]\n  getBottomRows: () => Row<TData>[]\n  getCenterRows: () => Row<TData>[]\n}\n\n//\n\nconst getDefaultColumnPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nconst getDefaultRowPinningState = (): RowPinningState => ({\n  top: [],\n  bottom: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState & RowPinningState => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      rowPinning: getDefaultRowPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions & RowPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n      onRowPinningChange: makeStateUpdater('rowPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.pin = position => {\n      const columnIds = column\n        .getLeafColumns()\n        .map(d => d.id)\n        .filter(Boolean) as string[]\n\n      table.setColumnPinning(old => {\n        if (position === 'right') {\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: [\n              ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n          }\n        }\n\n        if (position === 'left') {\n          return {\n            left: [\n              ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        }\n\n        return {\n          left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n          right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n        }\n      })\n    }\n\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns()\n\n      return leafColumns.some(\n        d =>\n          (d.columnDef.enablePinning ?? true) &&\n          (table.options.enableColumnPinning ??\n            table.options.enablePinning ??\n            true)\n      )\n    }\n\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n      const { left, right } = table.getState().columnPinning\n\n      const isLeft = leafColumnIds.some(d => left?.includes(d))\n      const isRight = leafColumnIds.some(d => right?.includes(d))\n\n      return isLeft ? 'left' : isRight ? 'right' : false\n    }\n\n    column.getPinnedIndex = () => {\n      const position = column.getIsPinned()\n\n      return position\n        ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n        : 0\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows\n        ? row.getLeafRows().map(({ id }) => id)\n        : []\n      const parentRowIds = includeParentRows\n        ? row.getParentRows().map(({ id }) => id)\n        : []\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds])\n\n      table.setRowPinning(old => {\n        if (position === 'bottom') {\n          return {\n            top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n            bottom: [\n              ...(old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n              ...Array.from(rowIds),\n            ],\n          }\n        }\n\n        if (position === 'top') {\n          return {\n            top: [\n              ...(old?.top ?? []).filter(d => !rowIds?.has(d)),\n              ...Array.from(rowIds),\n            ],\n            bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n          }\n        }\n\n        return {\n          top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n          bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n        }\n      })\n    }\n    row.getCanPin = () => {\n      const { enableRowPinning, enablePinning } = table.options\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row)\n      }\n      return enableRowPinning ?? enablePinning ?? true\n    }\n    row.getIsPinned = () => {\n      const rowIds = [row.id]\n\n      const { top, bottom } = table.getState().rowPinning\n\n      const isTop = rowIds.some(d => top?.includes(d))\n      const isBottom = rowIds.some(d => bottom?.includes(d))\n\n      return isTop ? 'top' : isBottom ? 'bottom' : false\n    }\n    row.getPinnedIndex = () => {\n      const position = row.getIsPinned()\n      if (!position) return -1\n\n      const visiblePinnedRowIds = table\n        ._getPinnedRows(position)\n        ?.map(({ id }) => id)\n\n      return visiblePinnedRowIds?.indexOf(row.id) ?? -1\n    }\n    row.getCenterVisibleCells = memo(\n      () => [\n        row._getAllVisibleCells(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.column.id))\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' && 'row.getCenterVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getLeftVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.left, ,],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'left' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' && 'row.getLeftVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getRightVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'right' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' && 'row.getRightVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnPinning = updater =>\n      table.options.onColumnPinningChange?.(updater)\n\n    table.resetColumnPinning = defaultState =>\n      table.setColumnPinning(\n        defaultState\n          ? getDefaultColumnPinningState()\n          : table.initialState?.columnPinning ?? getDefaultColumnPinningState()\n      )\n\n    table.getIsSomeColumnsPinned = position => {\n      const pinningState = table.getState().columnPinning\n\n      if (!position) {\n        return Boolean(pinningState.left?.length || pinningState.right?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table.getLeftLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n      (allColumns, left) => {\n        return (left ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.getRightLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n      (allColumns, right) => {\n        return (right ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.getCenterLeafColumns = memo(\n      () => [\n        table.getAllLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allColumns.filter(d => !leftAndRight.includes(d.id))\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    )\n\n    table.setRowPinning = updater => table.options.onRowPinningChange?.(updater)\n\n    table.resetRowPinning = defaultState =>\n      table.setRowPinning(\n        defaultState\n          ? getDefaultRowPinningState()\n          : table.initialState?.rowPinning ?? getDefaultRowPinningState()\n      )\n\n    table.getIsSomeRowsPinned = position => {\n      const pinningState = table.getState().rowPinning\n\n      if (!position) {\n        return Boolean(pinningState.top?.length || pinningState.bottom?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table._getPinnedRows = (position: 'top' | 'bottom') =>\n      memo(\n        () => [table.getRowModel().rows, table.getState().rowPinning[position]],\n        (visibleRows, pinnedRowIds) => {\n          const rows =\n            table.options.keepPinnedRows ?? true\n              ? //get all rows that are pinned even if they would not be otherwise visible\n                //account for expanded parent rows, but not pagination or filtering\n                (pinnedRowIds ?? []).map(rowId => {\n                  const row = table.getRow(rowId, true)\n                  return row.getIsAllParentsExpanded() ? row : null\n                })\n              : //else get only visible rows that are pinned\n                (pinnedRowIds ?? []).map(\n                  rowId => visibleRows.find(row => row.id === rowId)!\n                )\n\n          return rows\n            .filter(Boolean)\n            .map(d => ({ ...d, position })) as Row<TData>[]\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' &&\n            `row.get${position === 'top' ? 'Top' : 'Bottom'}Rows`,\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      )()\n\n    table.getTopRows = () => table._getPinnedRows('top')\n\n    table.getBottomRows = () => table._getPinnedRows('bottom')\n\n    table.getCenterRows = memo(\n      () => [\n        table.getRowModel().rows,\n        table.getState().rowPinning.top,\n        table.getState().rowPinning.bottom,\n      ],\n      (allRows, top, bottom) => {\n        const topAndBottom = new Set([...(top ?? []), ...(bottom ?? [])])\n        return allRows.filter(d => !topAndBottom.has(d.id))\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getCenterRows',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowSelection = updater =>\n      table.options.onRowSelectionChange?.(updater)\n    table.resetRowSelection = defaultState =>\n      table.setRowSelection(\n        defaultState ? {} : table.initialState.rowSelection ?? {}\n      )\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value =\n          typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n        const rowSelection = { ...old }\n\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return\n            }\n            rowSelection[row.id] = true\n          })\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id]\n          })\n        }\n\n        return rowSelection\n      })\n    }\n    table.toggleAllPageRowsSelected = value =>\n      table.setRowSelection(old => {\n        const resolvedValue =\n          typeof value !== 'undefined'\n            ? value\n            : !table.getIsAllPageRowsSelected()\n\n        const rowSelection: RowSelectionState = { ...old }\n\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n        })\n\n        return rowSelection\n      })\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel()\n    table.getSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getCoreRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getFilteredSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getFilteredRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' &&\n          'getFilteredSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getGroupedSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getSortedRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n      const { rowSelection } = table.getState()\n\n      let isAllRowsSelected = Boolean(\n        preGroupedFlatRows.length && Object.keys(rowSelection).length\n      )\n\n      if (isAllRowsSelected) {\n        if (\n          preGroupedFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllRowsSelected = false\n        }\n      }\n\n      return isAllRowsSelected\n    }\n\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table\n        .getPaginationRowModel()\n        .flatRows.filter(row => row.getCanSelect())\n      const { rowSelection } = table.getState()\n\n      let isAllPageRowsSelected = !!paginationFlatRows.length\n\n      if (\n        isAllPageRowsSelected &&\n        paginationFlatRows.some(row => !rowSelection[row.id])\n      ) {\n        isAllPageRowsSelected = false\n      }\n\n      return isAllPageRowsSelected\n    }\n\n    table.getIsSomeRowsSelected = () => {\n      const totalSelected = Object.keys(\n        table.getState().rowSelection ?? {}\n      ).length\n      return (\n        totalSelected > 0 &&\n        totalSelected < table.getFilteredRowModel().flatRows.length\n      )\n    }\n\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows\n      return table.getIsAllPageRowsSelected()\n        ? false\n        : paginationFlatRows\n            .filter(row => row.getCanSelect())\n            .some(d => d.getIsSelected() || d.getIsSomeSelected())\n    }\n\n    table.getToggleAllRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllPageRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleSelected = value => {\n      const isSelected = row.getIsSelected()\n\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !isSelected\n\n        if (row.getCanSelect() && isSelected === value) {\n          return old\n        }\n\n        const selectedRowIds = { ...old }\n\n        mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n        return selectedRowIds\n      })\n    }\n    row.getIsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isRowSelected(row, rowSelection)\n    }\n\n    row.getIsSomeSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'some'\n    }\n\n    row.getIsAllSubRowsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'all'\n    }\n\n    row.getCanSelect = () => {\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row)\n      }\n\n      return table.options.enableRowSelection ?? true\n    }\n\n    row.getCanSelectSubRows = () => {\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row)\n      }\n\n      return table.options.enableSubRowSelection ?? true\n    }\n\n    row.getCanMultiSelect = () => {\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row)\n      }\n\n      return table.options.enableMultiRowSelection ?? true\n    }\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect()\n\n      return (e: unknown) => {\n        if (!canSelect) return\n        row.toggleSelected(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (!row.subRows?.length) return false\n  \n  let allChildrenSelected = true\n  let someSelected = false\n\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return\n    }\n\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection, table)\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true\n        allChildrenSelected = false\n      } else {\n        allChildrenSelected = false\n      }\n    }\n  })\n\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n      let isString = false\n\n      for (const row of firstRows) {\n        const value = row?.getValue(column.id)\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime\n        }\n\n        if (typeof value === 'string') {\n          isString = true\n\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric\n          }\n        }\n      }\n\n      if (isString) {\n        return sortingFns.text\n      }\n\n      return sortingFns.basic\n    }\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return 'asc'\n      }\n\n      return 'desc'\n    }\n    column.getSortingFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.sortingFn)\n        ? column.columnDef.sortingFn\n        : column.columnDef.sortingFn === 'auto'\n        ? column.getAutoSortingFn()\n        : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n          sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n    }\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder()\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old?.find(d => d.id === column.id)\n        const existingIndex = old?.findIndex(d => d.id === column.id)\n\n        let newSorting: SortingState = []\n\n        // What should we do with this sort action?\n        let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n        // Multi-mode\n        if (old?.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'add'\n          }\n        } else {\n          // Normal mode\n          if (old?.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace'\n          } else if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'replace'\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove'\n            }\n          }\n        }\n\n        if (sortAction === 'add') {\n          newSorting = [\n            ...old,\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n          // Take latest n columns\n          newSorting.splice(\n            0,\n            newSorting.length -\n              (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n          )\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc,\n              }\n            }\n            return d\n          })\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id)\n        } else {\n          newSorting = [\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n        }\n\n        return newSorting\n      })\n    }\n\n    column.getFirstSortDir = () => {\n      const sortDescFirst =\n        column.columnDef.sortDescFirst ??\n        table.options.sortDescFirst ??\n        column.getAutoSortDir() === 'desc'\n      return sortDescFirst ? 'desc' : 'asc'\n    }\n\n    column.getNextSortingOrder = (multi?: boolean) => {\n      const firstSortDirection = column.getFirstSortDir()\n      const isSorted = column.getIsSorted()\n\n      if (!isSorted) {\n        return firstSortDirection\n      }\n\n      if (\n        isSorted !== firstSortDirection &&\n        (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n        (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc'\n    }\n\n    column.getCanSort = () => {\n      return (\n        (column.columnDef.enableSorting ?? true) &&\n        (table.options.enableSorting ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanMultiSort = () => {\n      return (\n        column.columnDef.enableMultiSort ??\n        table.options.enableMultiSort ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsSorted = () => {\n      const columnSort = table.getState().sorting?.find(d => d.id === column.id)\n\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n    }\n\n    column.getSortIndex = () =>\n      table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1\n\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old =>\n        old?.length ? old.filter(d => d.id !== column.id) : []\n      )\n    }\n\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort()\n\n      return (e: unknown) => {\n        if (!canSort) return\n        ;(e as any).persist?.()\n        column.toggleSorting?.(\n          undefined,\n          column.getCanMultiSort() ? table.options.isMultiSortEvent?.(e) : false\n        )\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setSorting = updater => table.options.onSortingChange?.(updater)\n    table.resetSorting = defaultState => {\n      table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n    }\n    table.getPreSortedRowModel = () => table.getGroupedRowModel()\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table)\n      }\n\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel()\n      }\n\n      return table._getSortedRowModel()\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value ?? !column.getIsVisible(),\n        }))\n      }\n    }\n    column.getIsVisible = () => {\n      return table.getState().columnVisibility?.[column.id] ?? true\n    }\n\n    column.getCanHide = () => {\n      return (\n        (column.columnDef.enableHiding ?? true) &&\n        (table.options.enableHiding ?? true)\n      )\n    }\n    column.getToggleVisibilityHandler = () => {\n      return (e: unknown) => {\n        column.toggleVisibility?.(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row._getAllVisibleCells = memo(\n      () => [row.getAllCells(), table.getState().columnVisibility],\n      cells => {\n        return cells.filter(cell => cell.column.getIsVisible())\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n    row.getVisibleCells = memo(\n      () => [\n        row.getLeftVisibleCells(),\n        row.getCenterVisibleCells(),\n        row.getRightVisibleCells(),\n      ],\n      (left, center, right) => [...left, ...center, ...right],\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod(\n      'getVisibleFlatColumns',\n      () => table.getAllFlatColumns()\n    )\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getVisibleLeafColumns',\n      () => table.getAllLeafColumns()\n    )\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getLeftVisibleLeafColumns',\n      () => table.getLeftLeafColumns()\n    )\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getRightVisibleLeafColumns',\n      () => table.getRightLeafColumns()\n    )\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getCenterVisibleLeafColumns',\n      () => table.getCenterLeafColumns()\n    )\n\n    table.setColumnVisibility = updater =>\n      table.options.onColumnVisibilityChange?.(updater)\n\n    table.resetColumnVisibility = defaultState => {\n      table.setColumnVisibility(\n        defaultState ? {} : table.initialState.columnVisibility ?? {}\n      )\n    }\n\n    table.toggleAllColumnsVisible = value => {\n      value = value ?? !table.getIsAllColumnsVisible()\n\n      table.setColumnVisibility(\n        table.getAllLeafColumns().reduce(\n          (obj, column) => ({\n            ...obj,\n            [column.id]: !value ? !column.getCanHide?.() : value,\n          }),\n          {}\n        )\n      )\n    }\n\n    table.getIsAllColumnsVisible = () =>\n      !table.getAllLeafColumns().some(column => !column.getIsVisible?.())\n\n    table.getIsSomeColumnsVisible = () =>\n      table.getAllLeafColumns().some(column => column.getIsVisible?.())\n\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllColumnsVisible(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string, searchAll?: boolean) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string, searchAll?: boolean) => {\n      const row = (searchAll ? table.getCoreRowModel() : table.getRowModel())\n        .rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce(\n          (acc, column) => {\n            acc[column.id] = column\n            return acc\n          },\n          {} as Record<string, Column<TData, unknown>>\n        )\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index]\n    feature?.createTable?.(table)\n  }\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    feature.createCell?.(\n      cell as Cell<TData, TValue>,\n      column,\n      row as Row<TData>,\n      table\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    feature?.createRow?.(row, table)\n  }\n\n  return row as Row<TData>\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              let sortInt = 0\n\n              // All sorting ints should always return in ascending order\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = aValue === undefined\n                const bUndefined = bValue === undefined\n\n                if (aUndefined || bUndefined) {\n                  sortInt =\n                    aUndefined && bUndefined\n                      ? 0\n                      : aUndefined\n                      ? columnInfo.sortUndefined\n                      : -columnInfo.sortUndefined\n                }\n              }\n\n              if (sortInt === 0) {\n                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n              }\n\n              // If sorting is non-zero, take care of desc and inversion\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","_result","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","feature","_features","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","reduce","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","Object","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getIsAllParentsExpanded","isFullyExpanded","currentRow","parentId","getRow","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","resetPageSize","_table$initialState$p3","_table$initialState2","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","rowPinning","top","bottom","onColumnPinningChange","onRowPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","enableColumnPinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","includeLeafRows","includeParentRows","leafRowIds","getLeafRows","parentRowIds","getParentRows","rowIds","setRowPinning","_old$top3","_old$bottom3","_old$top","_old$bottom","_old$top2","_old$bottom2","has","_ref4","enableRowPinning","isTop","isBottom","_table$_getPinnedRows","_visiblePinnedRowIds$","visiblePinnedRowIds","_getPinnedRows","_ref5","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","resetRowPinning","_table$initialState$r","getIsSomeRowsPinned","_pinningState$positio2","_pinningState$top","_pinningState$bottom","visibleRows","pinnedRowIds","_table$options$keepPi","keepPinnedRows","getTopRows","getBottomRows","getCenterRows","allRows","topAndBottom","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","_row$subRows3","allChildrenSelected","someSelected","subRow","subRowChildrenSelected","reSplitAlphaNumeric","compareBasic","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","sortUndefined","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","obj","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","renderValue","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","_valuesCache","_uniqueValuesCache","getUniqueValues","getParentRow","parentRows","parentRow","acc","filterRows","filterRowImpl","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","_table$options$maxLea2","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","_options$initialState","defaultOptions","assign","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","searchAll","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","_table$getColumn","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","j","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","sortInt","aUndefined","bUndefined"],"mappings":"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"}