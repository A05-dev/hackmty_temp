import { TableFeature } from '../core/table';
import { OnChangeFn, Updater, Column, Row, Cell, RowData } from '../types';
export type ColumnPinningPosition = false | 'left' | 'right';
export type RowPinningPosition = false | 'top' | 'bottom';
export interface ColumnPinningState {
    left?: string[];
    right?: string[];
}
export interface RowPinningState {
    top?: string[];
    bottom?: string[];
}
export interface ColumnPinningTableState {
    columnPinning: ColumnPinningState;
}
export interface RowPinningTableState {
    rowPinning: RowPinningState;
}
export interface ColumnPinningOptions {
    onColumnPinningChange?: OnChangeFn<ColumnPinningState>;
    enablePinning?: boolean;
    enableColumnPinning?: boolean;
}
export interface RowPinningOptions<TData extends RowData> {
    onRowPinningChange?: OnChangeFn<RowPinningState>;
    enableRowPinning?: boolean | ((row: Row<TData>) => boolean);
    keepPinnedRows?: boolean;
}
export interface ColumnPinningDefaultOptions {
    onColumnPinningChange: OnChangeFn<ColumnPinningState>;
}
export interface RowPinningDefaultOptions {
    onRowPinningChange: OnChangeFn<RowPinningState>;
}
export interface ColumnPinningColumnDef {
    enablePinning?: boolean;
}
export interface ColumnPinningColumn {
    getCanPin: () => boolean;
    getPinnedIndex: () => number;
    getIsPinned: () => ColumnPinningPosition;
    pin: (position: ColumnPinningPosition) => void;
}
export interface ColumnPinningRow<TData extends RowData> {
    getLeftVisibleCells: () => Cell<TData, unknown>[];
    getCenterVisibleCells: () => Cell<TData, unknown>[];
    getRightVisibleCells: () => Cell<TData, unknown>[];
}
export interface RowPinningRow {
    getCanPin: () => boolean;
    getIsPinned: () => RowPinningPosition;
    getPinnedIndex: () => number;
    pin: (position: RowPinningPosition, includeLeafRows?: boolean, includeParentRows?: boolean) => void;
}
export interface ColumnPinningInstance<TData extends RowData> {
    setColumnPinning: (updater: Updater<ColumnPinningState>) => void;
    resetColumnPinning: (defaultState?: boolean) => void;
    getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean;
    getLeftLeafColumns: () => Column<TData, unknown>[];
    getRightLeafColumns: () => Column<TData, unknown>[];
    getCenterLeafColumns: () => Column<TData, unknown>[];
}
export interface RowPinningInstance<TData extends RowData> {
    setRowPinning: (updater: Updater<RowPinningState>) => void;
    resetRowPinning: (defaultState?: boolean) => void;
    getIsSomeRowsPinned: (position?: RowPinningPosition) => boolean;
    _getPinnedRows: (position: 'top' | 'bottom') => Row<TData>[];
    getTopRows: () => Row<TData>[];
    getBottomRows: () => Row<TData>[];
    getCenterRows: () => Row<TData>[];
}
export declare const Pinning: TableFeature;
