{"version":3,"file":"RowSelection.js","sources":["../../../src/features/RowSelection.ts"],"sourcesContent":["import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowSelection = updater =>\n      table.options.onRowSelectionChange?.(updater)\n    table.resetRowSelection = defaultState =>\n      table.setRowSelection(\n        defaultState ? {} : table.initialState.rowSelection ?? {}\n      )\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value =\n          typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n        const rowSelection = { ...old }\n\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return\n            }\n            rowSelection[row.id] = true\n          })\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id]\n          })\n        }\n\n        return rowSelection\n      })\n    }\n    table.toggleAllPageRowsSelected = value =>\n      table.setRowSelection(old => {\n        const resolvedValue =\n          typeof value !== 'undefined'\n            ? value\n            : !table.getIsAllPageRowsSelected()\n\n        const rowSelection: RowSelectionState = { ...old }\n\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n        })\n\n        return rowSelection\n      })\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel()\n    table.getSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getCoreRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getFilteredSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getFilteredRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' &&\n          'getFilteredSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    table.getGroupedSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getSortedRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n      const { rowSelection } = table.getState()\n\n      let isAllRowsSelected = Boolean(\n        preGroupedFlatRows.length && Object.keys(rowSelection).length\n      )\n\n      if (isAllRowsSelected) {\n        if (\n          preGroupedFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllRowsSelected = false\n        }\n      }\n\n      return isAllRowsSelected\n    }\n\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table\n        .getPaginationRowModel()\n        .flatRows.filter(row => row.getCanSelect())\n      const { rowSelection } = table.getState()\n\n      let isAllPageRowsSelected = !!paginationFlatRows.length\n\n      if (\n        isAllPageRowsSelected &&\n        paginationFlatRows.some(row => !rowSelection[row.id])\n      ) {\n        isAllPageRowsSelected = false\n      }\n\n      return isAllPageRowsSelected\n    }\n\n    table.getIsSomeRowsSelected = () => {\n      const totalSelected = Object.keys(\n        table.getState().rowSelection ?? {}\n      ).length\n      return (\n        totalSelected > 0 &&\n        totalSelected < table.getFilteredRowModel().flatRows.length\n      )\n    }\n\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows\n      return table.getIsAllPageRowsSelected()\n        ? false\n        : paginationFlatRows\n            .filter(row => row.getCanSelect())\n            .some(d => d.getIsSelected() || d.getIsSomeSelected())\n    }\n\n    table.getToggleAllRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllPageRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleSelected = value => {\n      const isSelected = row.getIsSelected()\n\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !isSelected\n\n        if (row.getCanSelect() && isSelected === value) {\n          return old\n        }\n\n        const selectedRowIds = { ...old }\n\n        mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n        return selectedRowIds\n      })\n    }\n    row.getIsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isRowSelected(row, rowSelection)\n    }\n\n    row.getIsSomeSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'some'\n    }\n\n    row.getIsAllSubRowsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'all'\n    }\n\n    row.getCanSelect = () => {\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row)\n      }\n\n      return table.options.enableRowSelection ?? true\n    }\n\n    row.getCanSelectSubRows = () => {\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row)\n      }\n\n      return table.options.enableSubRowSelection ?? true\n    }\n\n    row.getCanMultiSelect = () => {\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row)\n      }\n\n      return table.options.enableMultiRowSelection ?? true\n    }\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect()\n\n      return (e: unknown) => {\n        if (!canSelect) return\n        row.toggleSelected(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (!row.subRows?.length) return false\n  \n  let allChildrenSelected = true\n  let someSelected = false\n\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return\n    }\n\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection, table)\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true\n        allChildrenSelected = false\n      } else {\n        allChildrenSelected = false\n      }\n    }\n  })\n\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n}\n"],"names":["RowSelection","getInitialState","state","rowSelection","getDefaultOptions","table","onRowSelectionChange","makeStateUpdater","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","createTable","setRowSelection","updater","options","resetRowSelection","defaultState","_table$initialState$r","initialState","toggleAllRowsSelected","value","old","getIsAllRowsSelected","preGroupedFlatRows","getPreGroupedRowModel","flatRows","forEach","row","getCanSelect","id","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","getRowModel","rows","mutateRowIsSelected","getPreSelectedRowModel","getCoreRowModel","getSelectedRowModel","memo","getState","rowModel","Object","keys","length","rowsById","selectRowsFn","key","process","env","NODE_ENV","debug","_table$options$debugA","debugAll","debugTable","getFilteredSelectedRowModel","getFilteredRowModel","_table$options$debugA2","getGroupedSelectedRowModel","getSortedRowModel","_table$options$debugA3","isAllRowsSelected","Boolean","some","paginationFlatRows","getPaginationRowModel","filter","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","d","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","e","target","checked","getToggleAllPageRowsSelectedHandler","createRow","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","_table$options$enable","getCanSelectSubRows","_table$options$enable2","getCanMultiSelect","_table$options$enable3","getToggleSelectedHandler","canSelect","_target","_row$subRows","getRow","subRows","newSelectedFlatRows","newSelectedRowsById","recurseRows","depth","map","_row$subRows2","push","selection","_selection$row$id","_row$subRows3","allChildrenSelected","someSelected","subRow","subRowChildrenSelected"],"mappings":"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"}