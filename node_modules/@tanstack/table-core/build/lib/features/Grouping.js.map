{"version":3,"file":"Grouping.js","sources":["../../../src/features/Grouping.ts"],"sourcesContent":["import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old?.includes(column.id)) {\n          return old.filter(d => d !== column.id)\n        }\n\n        return [...(old ?? []), column.id]\n      })\n    }\n\n    column.getCanGroup = () => {\n      return (\n        column.columnDef.enableGrouping ??\n        true ??\n        table.options.enableGrouping ??\n        true ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsGrouped = () => {\n      return table.getState().grouping?.includes(column.id)\n    }\n\n    column.getGroupedIndex = () => table.getState().grouping?.indexOf(column.id)\n\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup()\n\n      return () => {\n        if (!canGroup) return\n        column.toggleGrouping()\n      }\n    }\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'number') {\n        return aggregationFns.sum\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent\n      }\n    }\n    column.getAggregationFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.aggregationFn)\n        ? column.columnDef.aggregationFn\n        : column.columnDef.aggregationFn === 'auto'\n        ? column.getAutoAggregationFn()\n        : table.options.aggregationFns?.[\n            column.columnDef.aggregationFn as string\n          ] ??\n          aggregationFns[column.columnDef.aggregationFn as BuiltInAggregationFn]\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setGrouping = updater => table.options.onGroupingChange?.(updater)\n\n    table.resetGrouping = defaultState => {\n      table.setGrouping(defaultState ? [] : table.initialState?.grouping ?? [])\n    }\n\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel()\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n      }\n\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel()\n      }\n\n      return table._getGroupedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getIsGrouped = () => !!row.groupingColumnId\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.columnDef.getGroupingValue) {\n        return row.getValue(columnId)\n      }\n\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n        row.original\n      )\n\n      return row._groupingValuesCache[columnId]\n    }\n    row._groupingValuesCache = {}\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    cell.getIsGrouped = () =>\n      column.getIsGrouped() && column.id === row.groupingColumnId\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped()\n    cell.getIsAggregated = () =>\n      !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!row.subRows?.length\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n"],"names":["Grouping","getDefaultColumnDef","aggregatedCell","props","_toString","_props$getValue","getValue","toString","aggregationFn","getInitialState","state","grouping","getDefaultOptions","table","onGroupingChange","makeStateUpdater","groupedColumnMode","createColumn","column","toggleGrouping","setGrouping","old","includes","id","filter","d","getCanGroup","_ref","_ref2","_ref3","_column$columnDef$ena","columnDef","enableGrouping","options","accessorFn","getIsGrouped","_table$getState$group","getState","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","firstRow","getCoreRowModel","flatRows","value","aggregationFns","sum","Object","prototype","call","extent","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","Error","isFunction","createTable","updater","resetGrouping","defaultState","_table$initialState$g","_table$initialState","initialState","getPreGroupedRowModel","getFilteredRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","createRow","row","groupingColumnId","getGroupingValue","columnId","_groupingValuesCache","hasOwnProperty","getColumn","original","createCell","cell","getIsPlaceholder","getIsAggregated","_row$subRows","subRows","length","orderColumns","leafColumns","nonGroupingColumns","col","groupingColumns","map","g","find","Boolean"],"mappings":"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"}