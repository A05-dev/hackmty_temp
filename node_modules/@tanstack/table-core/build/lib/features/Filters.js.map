{"version":3,"file":"Filters.js","sources":["../../../src/features/Filters.ts"],"sourcesContent":["import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return filterFns.includesString\n      }\n\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange\n      }\n\n      if (typeof value === 'boolean') {\n        return filterFns.equals\n      }\n\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals\n      }\n\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes\n      }\n\n      return filterFns.weakEquals\n    }\n    column.getFilterFn = () => {\n      return isFunction(column.columnDef.filterFn)\n        ? column.columnDef.filterFn\n        : column.columnDef.filterFn === 'auto'\n        ? column.getAutoFilterFn()\n        : // @ts-ignore\n          table.options.filterFns?.[column.columnDef.filterFn as string] ??\n          filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n    }\n    column.getCanFilter = () => {\n      return (\n        (column.columnDef.enableColumnFilter ?? true) &&\n        (table.options.enableColumnFilters ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanGlobalFilter = () => {\n      return (\n        (column.columnDef.enableGlobalFilter ?? true) &&\n        (table.options.enableGlobalFilter ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsFiltered = () => column.getFilterIndex() > -1\n\n    column.getFilterValue = () =>\n      table.getState().columnFilters?.find(d => d.id === column.id)?.value\n\n    column.getFilterIndex = () =>\n      table.getState().columnFilters?.findIndex(d => d.id === column.id) ?? -1\n\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn()\n        const previousfilter = old?.find(d => d.id === column.id)\n\n        const newFilter = functionalUpdate(\n          value,\n          previousfilter ? previousfilter.value : undefined\n        )\n\n        //\n        if (\n          shouldAutoRemoveFilter(filterFn as FilterFn<TData>, newFilter, column)\n        ) {\n          return old?.filter(d => d.id !== column.id) ?? []\n        }\n\n        const newFilterObj = { id: column.id, value: newFilter }\n\n        if (previousfilter) {\n          return (\n            old?.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj\n              }\n              return d\n            }) ?? []\n          )\n        }\n\n        if (old?.length) {\n          return [...old, newFilterObj]\n        }\n\n        return [newFilterObj]\n      })\n    }\n    column._getFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, column.id)\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return column._getFacetedRowModel()\n    }\n    column._getFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, column.id)\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return column._getFacetedUniqueValues()\n    }\n    column._getFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, column.id)\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined\n      }\n\n      return column._getFacetedMinMaxValues()\n    }\n    // () => [column.getFacetedRowModel()],\n    // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.columnFilters = {}\n    row.columnFiltersMeta = {}\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString\n    }\n\n    table.getGlobalFilterFn = () => {\n      const { globalFilterFn: globalFilterFn } = table.options\n\n      return isFunction(globalFilterFn)\n        ? globalFilterFn\n        : globalFilterFn === 'auto'\n        ? table.getGlobalAutoFilterFn()\n        : // @ts-ignore\n          table.options.filterFns?.[globalFilterFn as string] ??\n          filterFns[globalFilterFn as BuiltInFilterFn]\n    }\n\n    table.setColumnFilters = (updater: Updater<ColumnFiltersState>) => {\n      const leafColumns = table.getAllLeafColumns()\n\n      const updateFn = (old: ColumnFiltersState) => {\n        return functionalUpdate(updater, old)?.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id)\n\n          if (column) {\n            const filterFn = column.getFilterFn()\n\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false\n            }\n          }\n\n          return true\n        })\n      }\n\n      table.options.onColumnFiltersChange?.(updateFn)\n    }\n\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange?.(updater)\n    }\n\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(\n        defaultState ? undefined : table.initialState.globalFilter\n      )\n    }\n\n    table.resetColumnFilters = defaultState => {\n      table.setColumnFilters(\n        defaultState ? [] : table.initialState?.columnFilters ?? []\n      )\n    }\n\n    table.getPreFilteredRowModel = () => table.getCoreRowModel()\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n      }\n\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getFilteredRowModel()\n    }\n\n    table._getGlobalFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, '__global__')\n\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getGlobalFacetedRowModel()\n    }\n\n    table._getGlobalFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, '__global__')\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return table._getGlobalFacetedUniqueValues()\n    }\n\n    table._getGlobalFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, '__global__')\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return\n      }\n\n      return table._getGlobalFacetedMinMaxValues()\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n"],"names":["Filters","getDefaultColumnDef","filterFn","getInitialState","state","columnFilters","globalFilter","undefined","getDefaultOptions","table","onColumnFiltersChange","makeStateUpdater","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","column","_table$getCoreRowMode","value","getCoreRowModel","flatRows","_getAllCellsByColumnId","id","getValue","createColumn","getAutoFilterFn","firstRow","filterFns","includesString","inNumberRange","equals","Array","isArray","arrIncludes","weakEquals","getFilterFn","_table$options$filter","_table$options$filter2","isFunction","columnDef","options","getCanFilter","_column$columnDef$ena","_table$options$enable","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","accessorFn","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","getState","find","d","_table$getState$colum2","_table$getState$colum3","findIndex","setFilterValue","setColumnFilters","old","previousfilter","newFilter","functionalUpdate","shouldAutoRemoveFilter","_old$filter","filter","newFilterObj","_old$map","map","length","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","createRow","row","columnFiltersMeta","createTable","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","updater","leafColumns","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","defaultState","initialState","resetColumnFilters","_table$initialState$c","_table$initialState","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","autoRemove"],"mappings":"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"}